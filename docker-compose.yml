# Specify the version of the Docker Compose file format
version: '3'

# Define the services that make up your application
services:

  # MySQL service
  mysql:
    image: mysql:latest  # Use the latest MySQL image from Docker Hub
    container_name: mysql-container  # Set a custom name for the container
    networks:
      - sms-network  # Connect the container to the "sms-network" network
    environment:
      MYSQL_ROOT_PASSWORD: root1234  # Set the root password for MySQL
      MYSQL_DATABASE: sms_db  # Create a database named "sms_db"
      MYSQL_USER: jerry  # Create a MySQL user named "jerry"
      MYSQL_PASSWORD: admin1234  # Set the password for the MySQL user
    ports:
      - "3306:3306"  # Map port 3306 on the host to port 3306 in the container
    volumes:
      - mysql-data:/var/lib/mysql  # Mount a named volume for persistent MySQL data storage

  # SMS client service
  sms-client:
    build:
      context: ./sms-client  # Build the image using the Dockerfile in the ./sms-client directory
    container_name: sms-client-container  # Set a custom name for the container
    networks:
      - sms-network  # Connect the container to the "sms-network" network
    ports:
      - "3000:3000"  # Map port 3000 on the host to port 3000 in the container
    depends_on:
      - sms-server  # Specify that the "sms-client" service depends on the "sms-server" service

  # SMS server service
  sms-server:
    build:
      context: ./sms-server  # Build the image using the Dockerfile in the ./sms-server directory
    container_name: sms-server-container  # Set a custom name for the container
    networks:
      - sms-network  # Connect the container to the "sms-network" network
    ports:
      - "8080:8080"  # Map port 8080 on the host to port 8080 in the container
    depends_on:
      - mysql  # Specify that the "sms-server" service depends on the "mysql" service

# Define a named volume for persistent MySQL data storage
volumes:
  mysql-data:
    driver: local  # Use the local driver for simplicity

# Define a custom network named "sms-network" with the bridge driver
networks:
  sms-network:
    driver: bridge
